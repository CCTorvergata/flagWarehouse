#!/usr/bin/env python3

import argparse
import os
import sys


def parse_args():
    parser = argparse.ArgumentParser(description='''Generate a simple exploit skeleton''',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('-s', '--service',
                        type = str,
                        required = True,
                        help='The name of the service to exploit')
    
    parser.add_argument('-p', '--port',
                        type = int,
                        required = True,
                        help='The port of the service to exploit')
    
    parser.add_argument('-l', '--library',
                        type = str,
                        required = True,
                        choices = ['pwn', 'requests'],
                        default = 'pwn',
                        help = 'The library to use for the exploit')

    return parser.parse_args()


def generate_exploit(service: str, port: int, library: str):
    FILENAME = f"exploit_{service}.py"

    if library == "requests":
        exploit_template = f"""#!/usr/bin/env python3
import requests
import os
import sys
import secrets
import string
import json
import re

def log(message):
    print(message, flush=True)

if len(sys.argv) != 2:
    print(f"Usage: {{sys.argv[0]}} <IP_ADDRESS>")
    sys.exit(1)

IP_ADDRESS = sys.argv[1]
dir_path = os.path.dirname(os.path.realpath(__file__)) + '/../'
flag_ids = {{}}

with open(dir_path + 'flag_ids.json', 'r', encoding='utf-8') as f:
    flag_ids = json.loads(f.read())

SERVICE = "{service}"
PORT = {port}
TARGET_URL = f'http://{{IP_ADDRESS}}:{{PORT}}'

def generate_secure_random_string(length=10):
    characters = string.ascii_letters + string.digits
    secure_random_string = ''.join(secrets.choice(characters) for _ in range(length))
    return secure_random_string

myFlagIds = flag_ids.get(SERVICE, {{}}).get(IP_ADDRESS, [])
flags = []

for i in myFlagIds:
    try:
        data = {{
            #write your data here
        }}
        #change path /
        r = requests.get(f"http://{{IP_ADDRESS}}:{{PORT}}/", json=data)
        
        
        r = requests.post(f"http://{{IP_ADDRESS}}:{{PORT}}/", json=data)
        if r.status_code == 200:
            log("HTTP OK")
        
        #if you want json
        result_json = r.json()

        #or text
        response = r.text()
        
        #regex for flag
        flag_regex = re.compile(r'\"([A-Z0-9=]{32})\"')

        matches = flag_regex.findall(response)

        if matches:
            for flag in matches:
                log(f"Flag trovata")
        else:
            log("Nessuna flag trovata")

        
        #don't forget to add flags in a list
        flags.append(flag)
        
    except Exception as e:
        log(f"Error: {{e}}")
        continue

print(flags)
"""

    elif library == "pwn":
        exploit_template = f"""#!/usr/bin/env python3
from pwn import *
import os
import sys
import secrets
import string

def log(message):
    print(message, flush=True)

if len(sys.argv) != 2:
    print(f"Usage: {{sys.argv[0]}} <IP_ADDRESS>")
    sys.exit(1)

IP_ADDRESS = sys.argv[1]
dir_path = os.path.dirname(os.path.realpath(__file__)) + '/../'
flag_ids = {{}}

with open(dir_path + 'flag_ids.json', 'r', encoding='utf-8') as f:
    flag_ids = json.loads(f.read())

SERVICE = "{service}"
PORT = {port}
TARGET_URL = f'http://{{IP_ADDRESS}}:{{PORT}}'

def generate_secure_random_string(length=10):
    characters = string.ascii_letters + string.digits
    secure_random_string = ''.join(secrets.choice(characters) for _ in range(length))
    return secure_random_string

myFlagIds = flag_ids.get(SERVICE, {{}}).get(IP_ADDRESS, [])
flags = []

for i in myFlagIds:
    try:
        r = remote({{IP_ADDRESS}}, {{PORT}})

        data = r.recvuntil(b"Something").decode()

        if data != "":
            flags.append(data)
        r.close()
    except Exception as e:
        log(f"Error: {{e}}")
        continue

print(flags)
"""

    else:
        exploit_template = f"""
#!/usr/bin/env python3
import requests
import os
import sys
import secrets
import string
import json
import re

def log(message):
    print(message, flush=True)

if len(sys.argv) != 2:
    print(f"Usage: {{sys.argv[0]}} <IP_ADDRESS>")
    sys.exit(1)

IP_ADDRESS = sys.argv[1]
dir_path = os.path.dirname(os.path.realpath(__file__)) + '/../'
flag_ids = {{}}

with open(dir_path + 'flag_ids.json', 'r', encoding='utf-8') as f:
    flag_ids = json.loads(f.read())

SERVICE = "{service}"
PORT = {port}
TARGET_URL = f'http://{{IP_ADDRESS}}:{{PORT}}'

def generate_secure_random_string(length=10):
    characters = string.ascii_letters + string.digits
    secure_random_string = ''.join(secrets.choice(characters) for _ in range(length))
    return secure_random_string

myFlagIds = flag_ids.get(SERVICE, {{}}).get(IP_ADDRESS, [])
flags = []

for i in myFlagIds:
    try:
        #write your exploit here
    except Exception as e:
        log(f"Error: {{e}}")
        continue

r.close()
print(flags)
""""exploits"

    os.chdir("exploits")
    with open(FILENAME, 'x', encoding='utf-8') as f:
        f.write(exploit_template)

    os.chmod(os.path.dirname(os.path.realpath(__file__))+"/exploits/"+FILENAME, 0o755)

    print(f"Generated exploit skeleton in {FILENAME}")


if __name__ == "__main__":
    args = parse_args()
    generate_exploit(args.service, args.port, args.library)
